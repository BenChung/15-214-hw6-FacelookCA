package org.scubaguy.facelook.UI;

import org.scubaguy.facelook.core.CellularAutomata;
import org.scubaguy.facelook.UI.views.View;
import org.scubaguy.facelook.UI.views.ViewManager;
import org.scubaguy.facelook.boards.EditableBoard;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.lang.reflect.InvocationTargetException;
import java.util.LinkedList;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Created by IntelliJ IDEA.
 * User: Ben Chung
 * Date: 3/22/12
 * Time: 5:20 AM
 * To change this template use File | Settings | File Templates.
 */
public class CADialog {
    private JPanel panel1;
    private View CAPanel1;
    private JButton stepButton;
    private JButton startButton;
    private JButton stopButton;
    private CellularAutomata ca;
    private CellRenderer renderer;
    private CARunner runner;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.add(CAPanel1, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        panel1.add(panel2, BorderLayout.SOUTH);
        stepButton = new JButton();
        stepButton.setText("Step");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(stepButton, gbc);
        stopButton = new JButton();
        stopButton.setText("Stop");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(stopButton, gbc);
        startButton = new JButton();
        startButton.setText("Start");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(startButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private static class DummyView extends View {
        public DummyView() {
            super(null);
        }

        @Override
        public void draw(EditableBoard b) {
            //To change body of implemented methods use File | Settings | File Templates.
        }
    }

    public CADialog(CellularAutomata ca, CellRenderer renderer) {
        runner = new CARunner(ca);

        this.ca = ca;
        this.renderer = renderer;
        CAPanel1 = ViewManager.getInstance().getViewForRenderer(renderer);

        CAPanel1.repaint();

        $$$setupUI$$$();
    }

    private void createUIComponents() {
    }

    public void show() {
        runner.registerTickListener(new CARunner.TickListener() {
            @Override
            public void onTick() {
                try {
                    if (!SwingUtilities.isEventDispatchThread())
                        SwingUtilities.invokeAndWait(new Runnable() {
                            @Override
                            public void run() {
                                CAPanel1.draw(ca.getTop());
                            }
                        });
                    else
                        CAPanel1.draw(ca.getTop());
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                } catch (InvocationTargetException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        stepButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runner.tick();
            }
        });

        startButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runner.tick(-2);
            }
        });

        stopButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runner.stop();
            }
        });

        CAPanel1.draw(ca.getTop());

        JFrame frame = new JFrame("Cellular Automata");
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.add(panel1);
        frame.pack();
        frame.setVisible(true);
    }

    private static class CARunner implements Runnable {
        private CellularAutomata ca;
        private AtomicInteger ticks = new AtomicInteger(0);

        public CARunner(CellularAutomata ca) {

            this.ca = ca;
        }

        public void tick() {
            ca.tick();
            triggerListeners();
        }

        private void triggerListeners() {
            for (TickListener listener : listeners)
                listener.onTick();
        }

        public void tick(int n) {
            if (ticks.get() > 0)
                return;
            ticks.set(n);

            new Thread(this).start();
        }

        public void stop() {
            ticks.set(0);
            triggerListeners();
        }

        @Override
        public void run() {
            while (ticks.get() > 0 || ticks.get() == -2) {
                ca.tick();
                triggerListeners();

                if (ticks.get() != -2)
                    ticks.decrementAndGet();
            }
        }

        private LinkedList<TickListener> listeners = new LinkedList<TickListener>();

        public void registerTickListener(TickListener listener) {
            listeners.add(listener);
        }

        public interface TickListener {
            public void onTick();
        }
    }
}